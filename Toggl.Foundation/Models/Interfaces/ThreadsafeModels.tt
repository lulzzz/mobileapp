﻿<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#>using Toggl.PrimeRadiant.Models;

namespace Toggl.Foundation.Models.Interfaces
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../../Toggl.Multivac/Models/" );
    var databaseModelDirectory = Path.Combine(filePath, "../../../Toggl.PrimeRadiant/Models");
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var databaseInterfaces = Directory.GetFiles(databaseModelDirectory, "I*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IIdentifiable"
            || interfaceName == "IDeletable"
            || interfaceName == "ILastChangedDatable")
            continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);
        
        var databaseInterfaceName = $"IDatabase{className}";
        var databaseInterfaceFileName = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models/", databaseInterfaceName + ".cs");
        var databaseInterfaceExists = File.Exists(databaseInterfaceFileName);

        var implementsIDatabaseSyncable = databaseInterfaceExists
            && File.ReadAllLines(databaseInterfaceFileName).Any(l => l.Contains("IDatabaseSyncable"));

        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    public interface IThreadsafe{className}");
        WriteLine($"        : IThreadsafeModel, {databaseInterfaceName}");
        WriteLine( "    {");
        WriteLine( "    }");

        isFirstClass = false;
    }

#>
}
