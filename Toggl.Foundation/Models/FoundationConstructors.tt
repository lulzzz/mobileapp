<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.Text.RegularExpressions"
#>using System.Linq;
using Toggl.Multivac.Models;
using Toggl.PrimeRadiant;
using Toggl.PrimeRadiant.Models;

namespace Toggl.Foundation.Models
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Multivac/Models/" );
    var databaseModelPath = Path.Combine(filePath, $"../../Toggl.PrimeRadiant/Models/");
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirstClass = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IIdentifiable"
            || interfaceName == "IDeletable"
            || interfaceName == "ILastChangedDatable")
            continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);

        var databaseInterfaceName = $"IDatabase{className}";
        var databaseInterfaceFileName = Path.Combine(filePath, "../../Toggl.PrimeRadiant/Models/", databaseInterfaceName + ".cs");
        var databaseInterfaceExists = File.Exists(databaseInterfaceFileName);

        var implementsIDatabaseSyncable = databaseInterfaceExists
            && File.ReadAllLines(databaseInterfaceFileName).Any(l => l.Contains("IDatabaseSyncable"));

        var implementsIDeletable = File.ReadAllLines(modelFile).Any(l => l.Contains("IDeletable"));

        var implementsILastChangedDatabale = File.ReadAllLines(modelFile).Any(l => l.Contains("ILastChangedDatable"));
        if (!isFirstClass)
            WriteLine("");

        WriteLine($"    internal partial class {className}");
        WriteLine( "    {");

        var databaseModel = Directory.GetFiles(databaseModelPath, $"*{className}.cs").SingleOrDefault();
        if (databaseModel != null)
        {
            WriteLine($"        private {className}(IDatabase{className} entity)");
            if (implementsIDatabaseSyncable)
                WriteLine($"            : this(entity as {interfaceName}, entity.SyncStatus, entity.LastSyncErrorMessage, entity.IsDeleted)");
            else
                WriteLine($"            : this(entity as {interfaceName})");
            WriteLine( "        {");

            foreach(var line in File.ReadAllLines(databaseModel))
            {
                var isProperty = line.Contains("get;");
                if (!isProperty) continue;

                var trimmedLine = line.Trim();
                var indexOfPropName = trimmedLine.IndexOf(" ") + 1;
                var propName = trimmedLine.Substring(indexOfPropName, trimmedLine.Length - 9 - indexOfPropName);

                var wrapping = "";
                var requiresWrapping = line.Contains("IDatabase");
                if (requiresWrapping)
                {
                    var isList = line.Contains(" IEnumerable<");
                    if (isList)
                    {
                        var foundationClassName = Regex.Match(line, "IEnumerable<IDatabase(?<class>[^>]+?)>").Groups["class"].Value;
                        wrapping = $"entity.{propName}.Select(Models.{foundationClassName}.From)";
                    }
                    else
                    {
                        wrapping = $"Models.{propName}.From(entity.{propName})";
                    }
                }
                
                var assignment = requiresWrapping ? $"entity.{propName} == null ? null : {wrapping}" : $"entity.{propName}";

                WriteLine($"            {propName} = {assignment};");
            }

            if (implementsIDatabaseSyncable)
            {
                WriteLine( "            SyncStatus = entity.SyncStatus;");
                WriteLine( "            LastSyncErrorMessage = entity.LastSyncErrorMessage;");
                WriteLine( "            IsDeleted = entity.IsDeleted;");
            }

            WriteLine( "        }\n");
        
            WriteLine($"        public static {className} From(IDatabase{className} entity)");
            WriteLine($"            => new {className}(entity);\n");
        }

        if (implementsIDatabaseSyncable)
            WriteLine($"        private {className}({interfaceName} entity, SyncStatus syncStatus, string lastSyncErrorMessage, bool isDeleted = false)");
        else
            WriteLine($"        private {className}({interfaceName} entity)");
        WriteLine( "        {");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var extendsIIdentifiable = line.Contains(": IIdentifiable");
            if (extendsIIdentifiable)
            {
                WriteLine("            Id = entity.Id;");
                continue;
            }
            
            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var trimmedLine = line.Trim();
            var indexOfPropName = trimmedLine.IndexOf(" ") + 1;
            var propName = trimmedLine.Substring(indexOfPropName, trimmedLine.Length - 9 - indexOfPropName);

            WriteLine($"            {propName} = entity.{propName};");
        }

        if (implementsILastChangedDatabale)
        {
            WriteLine("            At = entity.At;");
        }

        if (implementsIDeletable)
        {
            WriteLine("            ServerDeletedAt = entity.ServerDeletedAt;");
        }

        if (implementsIDatabaseSyncable)
        {    
            WriteLine( "            SyncStatus = syncStatus;");
            WriteLine( "            LastSyncErrorMessage = lastSyncErrorMessage;");
            WriteLine( "            IsDeleted = isDeleted;");
        }

        WriteLine( "        }\n");
        
        if (implementsIDatabaseSyncable)
        {   
            WriteLine($"        public static {className} Clean({interfaceName} entity)");
            WriteLine($"            => new {className}(entity, SyncStatus.InSync, null);\n");
            WriteLine($"        public static {className} Dirty({interfaceName} entity)");
            WriteLine($"            => new {className}(entity, SyncStatus.SyncNeeded, null);\n");
            WriteLine($"        public static {className} Unsyncable({interfaceName} entity, string errorMessage)");
            WriteLine($"            => new {className}(entity, SyncStatus.SyncFailed, errorMessage);");

            WriteLine("");
            WriteLine($"        public static {className} CleanDeleted({interfaceName} entity)");
            WriteLine($"            => new {className}(entity, SyncStatus.InSync, null, true);\n");
            WriteLine($"        public static {className} DirtyDeleted({interfaceName} entity)");
            WriteLine($"            => new {className}(entity, SyncStatus.SyncNeeded, null, true);\n");
            WriteLine($"        public static {className} UnsyncableDeleted({interfaceName} entity, string errorMessage)");
            WriteLine($"            => new {className}(entity, SyncStatus.SyncFailed, errorMessage, true);");
        }

        WriteLine( "    }");
        isFirstClass = false;
    }
#>}